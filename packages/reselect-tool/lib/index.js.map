{"version":3,"sources":["index.js"],"names":["_getState","_allSelectors","Set","_allSelectorsTableData","_isFunction","func","_isSelector","selector","resultFunc","_addSelector","add","_getSelectorName","selectorName","name","dependencies","reduce","base","dep","toString","_getAllGoodSelectors","listOfSelectorsWithProps","forEach","prototype","constructor","search","_allSelectorsWithoutProps","setA","setB","_difference","elem","delete","difference","registerSelectors","selectors","Object","keys","reset","checkSelector","possibleSelector","Error","isNamed","ret","recomputations","assign","getAllGoodSelectorsTableData","tableData","onlyGoodSelector","push","mapSelectorToCell","Array","from","map","index","selectorData","output","key","evaluateSelector","chromeRuntimeId","console","log","filter","result","getState","selectorOutput","chrome","runtime","sendMessage","data","getStateWith","stateGetter","window","__RESELECT_TOOLS__"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["let _getState = null;\nlet _allSelectors = new Set();\nlet _allSelectorsTableData = [];\n\nconst _isFunction = (func) => typeof func === 'function'\n\nconst _isSelector = (selector) => (selector && selector.resultFunc) || _isFunction(selector)\n\nconst _addSelector = (selector) => {\n  _allSelectors.add(selector);\n}\n\nconst _getSelectorName = (selector) => {\n  if (selector.selectorName) {\n    return selector.selectorName\n  }\n\n  if (selector.name) { // if it's a vanilla function, it will have a name.\n    return selector.name\n  }\n\n  return (selector.dependencies || []).reduce((base, dep) => {\n    return base\n  }, (selector.resultFunc ? selector.resultFunc : selector).toString())\n}\n\nconst _getAllGoodSelectors = () => {\n  let listOfSelectorsWithProps = new Set();\n\n  _allSelectors.forEach((selector) => {\n    if(selector.prototype.constructor.toString().search('props') > 0) {\n      listOfSelectorsWithProps.add(selector);\n    }\n  })\n\n  const difference = (setA, setB) => {\n    let _difference = new Set(setA)\n    for (let elem of setB) {\n      _difference.delete(elem)\n    }\n    return _difference\n  }\n  const _allSelectorsWithoutProps = difference(_allSelectors, listOfSelectorsWithProps);\n\n  return _allSelectorsWithoutProps;\n}\n\nexport function registerSelectors(selectors) {\n  Object.keys(selectors).forEach((name) => {\n    const selector = selectors[name]\n    if (_isSelector(selector)) {\n      selector.selectorName = name\n      _addSelector(selector)\n    }\n  })\n}\n\nexport function reset() {\n  _getState = null\n  _allSelectors = new Set()\n}\n\nexport function checkSelector(selector) {\n  if (typeof selector === 'string') {\n    for (const possibleSelector of _allSelectors) {\n      if (possibleSelector.selectorName === selector) {\n        selector = possibleSelector\n        break\n      }\n    }\n  }\n\n  if (!_isFunction(selector)) {\n    throw new Error(`Selector ${selector} is not a function...has it been registered?`)\n  }\n\n  const { dependencies = [] } = selector;\n\n  const isNamed = typeof selectorName === 'string'\n  const recomputations = selector.recomputations ? selector.recomputations() : 0;\n\n  const ret = { dependencies, recomputations, isNamed, selectorName: _getSelectorName(selector) }\n  const extra = {};\n\n  Object.assign(ret, extra);\n\n  return ret;\n}\n\nexport function getAllGoodSelectorsTableData() {\n  const tableData = [];\n  const onlyGoodSelector = _getAllGoodSelectors();\n\n  const mapSelectorToCell = (selectors = []) => {\n    return Array.from(selectors).map((selector, index) => {\n\n      const selectorData = checkSelector(selector);\n\n      const {selectorName = 'noNameProvided', dependencies = [], recomputations = 0, output } = selectorData;\n\n      return {\n        key: `SelectorKey_${index}_${selectorName}`,\n        name: selectorName,\n        dependencies: mapSelectorToCell(dependencies),\n        recomputations:  recomputations,\n        output: output,\n        selector: selector\n      }}\n    )\n  }\n\n  tableData.push(...mapSelectorToCell(onlyGoodSelector));\n\n  _allSelectorsTableData = tableData;\n\n  return tableData;\n}\n\nexport async function evaluateSelector(selectorName, chromeRuntimeId) {\n\n  console.log('RESELECT:TOOLS - Evaluating...', selectorName);\n\n  if (!_allSelectorsTableData) {\n    getAllGoodSelectorsTableData();\n  }\n\n  const selector = _allSelectorsTableData\n    .filter(selector => selector.name === selectorName)[0]\n    .selector;\n\n  let result = null;\n\n  try {\n    const selectorOutput = await selector(getState());\n    result = { \"output\": selectorOutput }\n  } catch(e) {\n    result = { \"output\": e }\n  }\n\n  // TODO: replace hardcoded value with chromeRuntimeId\n  chrome.runtime.sendMessage(\"fnmfbbikgihobcdmolhalpfminilmfdf\", { data: result });\n}\n\nexport function getState() {\n  if(_getState) {\n    return _getState();\n  }\n}\n\nexport function getStateWith(stateGetter) {\n  _getState = stateGetter\n}\n\nif (typeof window !== 'undefined') {\n  window.__RESELECT_TOOLS__ = {\n    checkSelector,\n    getAllGoodSelectorsTableData,\n    getState,\n    getStateWith,\n    evaluateSelector\n  }\n}\n"]}