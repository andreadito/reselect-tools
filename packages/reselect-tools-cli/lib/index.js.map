{"version":3,"sources":["locateSelectors.js","generateSelectorsIndex.js"],"names":["Project","require","locateSelectors","srcPattern","tsConfigFilePath","project","sourceFiles","getSourceFiles","sourceFilesPathsWithReselect","forEach","sourceFile","importDeclaration","getImportDeclaration","sourceFilePath","getSourceFile","getFilePath","push","module","exports","fs","path","yargs","findUp","chalk","boxen","CodeBlockWriter","default","boxenOptions","padding","margin","borderStyle","borderColor","color","configPath","sync","config","JSON","parse","readFileSync","src","out","tsConfigPath","option","alias","describe","demandOption","help","argv","options","writer","newLine","indentNumberOfSpaces","useTabs","useSingleQuote","selectorPaths","from","dir","writeLine","absolutePath","index","name","ext","relativePath","relative","dot","startsWith","fileContent","toString","writeFile","err","msgBox","green","bold","console","log","e","red"],"mappings":";AAAA,aACA,MAAM,QAAEA,GAAYC,QAAQ,YAEtBC,EAAkB,CAACC,EAAYC,KAC3BC,MAGAC,EAHU,IAAIN,EAAQ,CACxBI,iBAAAA,IAEwBG,eAAeJ,GACrCK,EAA+B,GAY9BA,OAVPF,EAAYG,QAASC,IACXC,MAAAA,EAAoBD,EAAWE,qBAAqB,YAEvDD,GAAAA,EAAmB,CACZE,MAAAA,EAAiBF,EAAkBG,gBAAgBC,cACzDP,EAA6BQ,KAAKH,MAKnCL,GAGXS,OAAOC,QAAU,CACbhB,gBAAAA;;;ACvBJ,MAAMiB,EAAKlB,QAAQ,MACbmB,EAAOnB,QAAQ,QACfoB,EAAQpB,QAAQ,SAChBqB,EAASrB,QAAQ,WACjBsB,EAAQtB,QAAQ,SAChBuB,EAAQvB,QAAQ,SAChBwB,EAAkBxB,QAAQ,qBAAqByB,SAE/C,gBAAExB,GAAoBD,QAAQ,qBAE9B0B,EAAe,CACjBC,QAAS,EACTC,OAAQ,EACRC,YAAa,QACbC,YAAa,QACbC,MAAO,OAELC,EAAaX,EAAOY,KAAK,CAAC,YAAa,yBACvCC,EAASF,EAAaG,KAAKC,MAAMlB,EAAGmB,aAAaL,IAAe,IAEhE,IAACM,EAAD,IAAMC,EAAN,aAAWC,GAAgBpB,EAC5Bc,OAAOA,GACPO,OAAO,MAAO,CACXC,MAAO,IACPC,SAAU,mBAEbF,OAAO,MAAO,CACXC,MAAO,IACPC,SAAU,8BAEbF,OAAO,eAAgB,CACpBC,MAAO,KACPC,SAAU,kBAEbC,aAAa,CAAC,MAAO,MAAO,gBAAiB,6EAC7CC,OACAC,KAEL,IAEUC,MAAAA,EAAU,CACZT,IAAAA,EAAKC,IAAAA,EAAKC,aAAAA,GAGRQ,EAAS,IAAIxB,EAAgB,CAE/ByB,QAAS,OACTC,qBAAsB,EACtBC,SAAS,EACTC,gBAAgB,IAEdC,EAAgBpD,EAAgB8C,EAAQT,IAAKS,EAAQP,cACrDc,EAAOnC,EAAKiB,MAAMW,EAAQR,KAAKgB,IAErCP,EAAOQ,UAAU,4BAEjBH,EAAc7C,QAAQ,CAACiD,EAAcC,KAC3B,MAAA,IAAEH,EAAF,KAAOI,EAAP,IAAaC,GAAQzC,EAAKiB,MAAMqB,GAEhCI,EAAe1C,EAAK2C,SAASR,EAAMC,GAEnCQ,EAAOF,EAAaG,WAAW,OAAe,GAAN,KAE9ChB,EAAOQ,4BAA4BO,IAAMF,KAAgBF,SAGvDM,MAAAA,EAAcjB,EAAOkB,WAE3BhD,EAAGiD,UAAUpB,EAAQR,IAAK0B,EAAa,OAASG,IACxCA,GAAAA,EAAK,MAAMA,EAETC,MAAAA,EAAS9C,EAAOD,EAAMgD,MAAMC,KAAK,+BAAgC7C,GAEvE8C,QAAQC,IAAIJ,KAGlB,MAAOK,GACCL,MAAAA,EAAS9C,EAAOD,EAAMqD,IAAIJ,KAAK,6BAA8BG,EAAER,YAAaxC,GAClF8C,QAAQC,IAAIJ","file":"index.js","sourceRoot":"../src","sourcesContent":["'use strict';\nconst { Project } = require('ts-morph');\n\nconst locateSelectors = (srcPattern, tsConfigFilePath) => {\n    const project = new Project({\n        tsConfigFilePath\n    });\n    const sourceFiles = project.getSourceFiles(srcPattern);\n    const sourceFilesPathsWithReselect = [];\n\n    sourceFiles.forEach((sourceFile) => {\n        const importDeclaration = sourceFile.getImportDeclaration(\"reselect\");\n\n        if(importDeclaration) {\n            const sourceFilePath = importDeclaration.getSourceFile().getFilePath();\n            sourceFilesPathsWithReselect.push(sourceFilePath);\n        }\n\n    });\n\n    return sourceFilesPathsWithReselect;\n};\n\nmodule.exports = {\n    locateSelectors\n};","#!/usr/bin/env node\nconst fs = require('fs');\nconst path = require('path');\nconst yargs = require('yargs');\nconst findUp = require('find-up');\nconst chalk = require(\"chalk\");\nconst boxen = require(\"boxen\");\nconst CodeBlockWriter = require('code-block-writer').default;\n\nconst { locateSelectors } = require('./locateSelectors');\n\nconst boxenOptions = {\n    padding: 1,\n    margin: 1,\n    borderStyle: \"round\",\n    borderColor: \"green\",\n    color: \"red\"\n};\nconst configPath = findUp.sync(['.reselect', 'reselect.config.json']);\nconst config = configPath ? JSON.parse(fs.readFileSync(configPath)) : {};\n\nconst {src, out, tsConfigPath} = yargs\n    .config(config)\n    .option('src', {\n        alias: 's',\n        describe: 'source pattern'\n    })\n    .option('out', {\n        alias: 'o',\n        describe: 'output for generated file'\n    })\n    .option('tsConfigPath', {\n        alias: 'tc',\n        describe: 'tsConfig path'\n    })\n    .demandOption(['src', 'out', 'tsConfigPath'], 'Please provide src, out, tsConfigPath arguments to work with this tool ‼️')\n    .help()\n    .argv;\n\ntry {\n\n    const options = {\n        src, out, tsConfigPath\n    };\n\n    const writer = new CodeBlockWriter({\n        // optional options\n        newLine: \"\\r\\n\",         // default: \"\\n\"\n        indentNumberOfSpaces: 2, // default: 4\n        useTabs: false,          // default: false\n        useSingleQuote: true     // default: false\n    });\n    const selectorPaths = locateSelectors(options.src, options.tsConfigPath);\n    const from = path.parse(options.out).dir;\n\n    writer.writeLine('// AUTOGENERATED CODE //');\n\n    selectorPaths.forEach((absolutePath, index) => {\n        const { dir, name, ext } = path.parse(absolutePath);\n\n        const relativePath = path.relative(from, dir);\n\n        const dot = !relativePath.startsWith('../') ? './': '';\n\n        writer.writeLine(`export * from '${dot}${relativePath}/${name}';`);\n    });\n\n    const fileContent = writer.toString();\n\n    fs.writeFile(options.out, fileContent, 'utf8', (err) => {\n        if (err) throw err;\n\n        const msgBox = boxen( chalk.green.bold(\"SELECTORS INDEX CREATED! 🎊\"), boxenOptions );\n\n        console.log(msgBox);\n\n    });\n} catch (e) {\n    const msgBox = boxen( chalk.red.bold('SOMETHING WENT WRONG 🤕 \\n', e.toString()), boxenOptions );\n    console.log(msgBox);\n}"]}